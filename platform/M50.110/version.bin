

Magic Lantern Nightly.2021Feb20.M50110
Camera   : M50
Firmware : 110
Changeset: 2acf29872280+ (digic6-dumper) tip
Built on : 2021-02-21 00:48:08 by b@bs-MacBook-Pro.local

diff -r 2acf29872280 src/config-defines.h
--- a/src/config-defines.h	Sun Apr 28 11:21:42 2019 +0000
+++ b/src/config-defines.h	Sat Feb 20 19:48:08 2021 -0500
@@ -9,7 +9,7 @@
  */
 
     /** Load fonts and print Hello World; will not start any other ML tasks, handlers etc. */
-    //~ #define CONFIG_HELLO_WORLD
+#define CONFIG_HELLO_WORLD
     
     /** Create a developer FIR for enabling the bootflag and dumping the ROM. */
     //~ #define CONFIG_DUMPER_BOOTFLAG
diff -r 2acf29872280 src/reboot.c
--- a/src/reboot.c	Sun Apr 28 11:21:42 2019 +0000
+++ b/src/reboot.c	Sat Feb 20 19:48:08 2021 -0500
@@ -251,14 +251,14 @@
 cstart( void )
 {
     uint32_t s = compute_signature((void*)SIG_START, SIG_LEN);
-    uint32_t expected_signature = CURRENT_CAMERA_SIGNATURE;
-    if (s != expected_signature)
-    {
+//    uint32_t expected_signature = CURRENT_CAMERA_SIGNATURE;
+//    if (s != expected_signature)
+ //   {
         qprint("[boot] firmware signature: "); qprintn(s); qprint("\n");
-        qprint("                 expected: "); qprintn(expected_signature); qprint("\n");
+  //      qprint("                 expected: "); qprintn(expected_signature); qprint("\n");
         qprint("            computed from: "); qprintn(SIG_START); qprint("\n");
-        fail();
-    }
+   //     fail();
+   // }
 
     /* turn on the LED as soon as autoexec.bin is loaded (may happen without powering on) */
     #if defined(CONFIG_40D) || defined(CONFIG_5DC)
diff -r 2acf29872280 platform/M50.110/Makefile
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/Makefile	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,4 @@
+# EOS M50 1.1.0
+
+MODEL=M50
+include ../Makefile.platform
diff -r 2acf29872280 platform/M50.110/Makefile.platform.default
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/Makefile.platform.default	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,23 @@
+# EOS M50 1.1.0
+
+CANON_NAME_FIR  = CCF19110.FIR
+FIRMWARE_ID     = 0x00000412
+UPDATE_NAME_FIR = D_M50110.FIR
+ROMBASEADDR     = 0xE0040000
+
+# Shrink Canon's malloc heap by changing its end address
+#          ("meminfo -m" in drysh)    ("memmap" in drysh)
+# Default: 0x000dc878 - 0x001f0ec0, 0x000dc870 - 0x001f1190 (total size 0x114920)
+# Patched: 0x000dc878 - 0x001b0ec0, 0x000dc870 - 0x001b1190 (256K reserved for ML)
+RESTARTSTART    = 0x001B0FC0
+
+# Cortex A9, binaries loaded as Thumb
+CFLAG_USER = -mthumb -march=armv7-a -mlong-calls
+
+# these should be removed when porting starts
+ifeq ($(ML_SRC_PROFILE),generic)
+ML_SRC_PROFILE  = minimal
+ML_MINIMAL_OBJ  = minimal-d78.o
+endif
+
+ML_BOOT_OBJ     = boot-d78.o
diff -r 2acf29872280 platform/M50.110/compute-signature.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/compute-signature.c	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,17 @@
+#include <stdio.h>
+#include <stdint.h>
+static uint32_t compute_signature(uint32_t * start, uint32_t num)
+{
+    uint32_t c = 0;
+    for (uint32_t * p = start; p < start + num; p++)
+    {
+        c += *p;
+    }
+    return c;
+}
+
+int main()
+{
+  printf("The signature is, %d", compute_signature(what_goes_here));
+return 0
+}
diff -r 2acf29872280 platform/M50.110/consts.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/consts.h	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,21 @@
+/*
+ *  EOS M50 1.1.0 consts w/ prayers
+ */
+
+#define CARD_LED_ADDRESS            0xD01300E4     /* maybe also 0xD01301A4 */
+#define LEDON                       0xD0002
+#define LEDOFF                      0xC0003
+
+#define CURRENT_GUI_MODE (*(int*)0x7B44) // 1.0.1, 1.0.2, 1.0.3, 1.1.0
+#define GUIMODE_PLAY 2
+#define GUIMODE_MENU 3
+#define HIJACK_FIXBR_DCACHE_CLN_1   0xE0040068   /* first call to dcache_clean, before cstart */
+#define HIJACK_FIXBR_ICACHE_INV_1   0xE0040072   /* first call to icache_invalidate, before cstart */
+#define HIJACK_FIXBR_DCACHE_CLN_2   0xE004009E   /* second call to dcache_clean, before cstart */
+#define HIJACK_FIXBR_ICACHE_INV_2   0xE00400A8   /* second call to icache_invalidate, before cstart */
+#define HIJACK_INSTR_BL_CSTART      0xE00400C4   /* easier to fix up here, rather than at E0040034 */
+#define HIJACK_INSTR_HEAP_SIZE      0xE00401D0   /* easier to patch the size; start address is computed */
+#define HIJACK_FIXBR_BZERO32        0xE004014A   /* called from cstart */
+#define HIJACK_FIXBR_CREATE_ITASK   0xE00401AC   /* called from cstart */
+#define HIJACK_INSTR_MY_ITASK       0xE00401DC   /* address of init_task passed to create_init_task */
+
diff -r 2acf29872280 platform/M50.110/features.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/features.h	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,1 @@
+
diff -r 2acf29872280 platform/M50.110/internals.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/internals.h	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,6 @@
+/**
+ * Camera internals for EOS M50 1.1.0
+ */
+
+/** This camera has a DIGIC VIII chip */
+#define CONFIG_DIGIC_VIII
diff -r 2acf29872280 platform/M50.110/stubs.102.S
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/stubs.102.S	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,100 @@
+/** \file
+ * Entry points into the firmware image.
+ *
+ * These are the functions that we can call from our tasks
+ * in the Canon 1.0.2 firmware for the EOS M50.
+ *
+ */
+/*
+ * Copyright (C) 2019 Magic Lantern Team
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the
+ * Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#include <stub.h>
+
+/* All functions are Thumb. */
+
+
+/** Startup **/
+NSTUB( ROMBASEADDR, firmware_entry )
+THUMB_FN(0xE00400FC,  cstart)                               /* calls bzero32 and create_init_task(..., init_task, ...) */
+THUMB_FN(0xE0578CD0,  bzero32)                              /* zeros out a data structure */
+THUMB_FN(0xE0143D00,  create_init_task)                     /* low-level DryOS initialization */
+THUMB_FN(0xE057773C,  dcache_clean)                         /* loop with MCR p15 c7,c10,1; DSB */
+THUMB_FN(0xE0577810,  icache_invalidate)                    /* loop with MCR p15 c7,c5,1; c7,c1,6; c7,c1,0; ISB */
+THUMB_FN(0xE0040224,  init_task)                            /* USER_MEM size checking, dmSetup, termDriverInit, stdlibSetup etc */
+
+/** Tasks **/
+DATA_PTR(    0x1010,  current_interrupt)                    /* from interrupt handler (VBAR + 0x18); where the interrupt ID is stored */
+DATA_PTR(    0x1028,  current_task)                         /* from task_create; pointer to the current task structure */
+THUMB_FN(0xE0559866,  msleep)                               /* argument is always multiple of 10 */
+THUMB_FN(0xE0545E4E,  task_create)                          /* used to start TaskMain, GuiMainTask etc */
+
+/** File I/O **/
+THUMB_FN(0xE0546552, _FIO_CreateFile)
+THUMB_FN(0xE05464A0, _FIO_OpenFile)
+THUMB_FN(0xE0546CC2,  FIO_CloseFile)
+THUMB_FN(0xE0546922, _FIO_ReadFile)
+THUMB_FN(0xE0546AAE, _FIO_WriteFile)
+THUMB_FN(0xE05469EE,  FIO_SeekSkipFile)                     // guess: Search?!
+THUMB_FN(0xE0546E5E, _FIO_GetFileSize)                      // AcqSize
+THUMB_FN(0xE0546888, _FIO_RemoveFile)
+THUMB_FN(0xE0547892, _FIO_RenameFile)
+THUMB_FN(0xE0547D1C, _FIO_CreateDirectory)
+THUMB_FN(0xE054817E, _FIO_FindFirstEx)                      // FirstEnt
+THUMB_FN(0xE0548284,  FIO_FindNextEx)                       // NextEnt
+THUMB_FN(0xE0548346,  FIO_FindClose)                        // CloseEnt
+THUMB_FN(0xE0547F06,  FIO_Flush)                            // to be called after FIO_CloseFile?
+
+/** Bitmap **/
+DATA_PTR(    0xFC20,  bmp_vram_info)                        /* first VRAM buffer, used right after DISP_SetUpdateOSDVram */
+
+/** Debug messages **/
+THUMB_FN(0xE0577F3C,  DryosDebugMsg)                        /* lots of debug messages; format string is third argument */
+
+/** Dumper **/
+THUMB_FN(0xE0085F70,  dump_file)                            /* tries to save a file to either "A:/%s" or "B:/%s"; calls FIO_RemoveFile/CreateFile/WriteFile/CloseFile/Flush */
+
+/** Eventprocs (call by name) **/
+THUMB_FN(0xE0572232,  call)                                 /* many functions called by name (lv_start, lv_stop etc) */
+
+/** GUI timers **/
+THUMB_FN(0xE0732B1E,  SetHPTimerNextTick)                   /* same "worker" function as SetHPTimerAfterNow */
+THUMB_FN(0xE0732ABE,  SetHPTimerAfterNow)                   /* from error message */
+THUMB_FN(0xE054CE80,  SetTimerAfter)                        /* from error message */
+THUMB_FN(0xE054CF36,  CancelTimer)                          /* CancelRefreshTimer, CancelPlayTimer */
+
+/** Memory allocation **/
+THUMB_FN(0xE055B000, _AllocateMemory)
+THUMB_FN(0xE055B1B8, _FreeMemory)
+THUMB_FN(0xE055AE8A,  GetMemoryInformation)
+THUMB_FN(0xE055AE5E,  GetSizeOfMaxRegion)
+THUMB_FN(0xE055AA60, _alloc_dma_memory)
+THUMB_FN(0xE055AA94, _free_dma_memory)
+THUMB_FN(0xE03C2386, _malloc)
+THUMB_FN(0xE03C23BE, _free)
+
+/** Memory info **/
+THUMB_FN(0xE00F1C1C,  malloc_info)                          /* Malloc Information */
+THUMB_FN(0xE009DEB8,  memmap_info)                          /* Exception vector, DRYOS system memory etc */
+THUMB_FN(0xE0146FDA,  smemShowFix)                          /* Common Lower, Common Upper etc */
+THUMB_FN(0xE00F1CB4,  sysmem_info)                          /* System Memory Information */
+
+/** Misc **/
+THUMB_FN(0xE055A820,  uart_printf)
+THUMB_FN(0xE0096060,  vsnprintf)                            /* called by LogFile_printf(..., "*Data Lost*\n", ...); the one called by DebugMsg only knows %s */
diff -r 2acf29872280 platform/M50.110/stubs.S
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/platform/M50.110/stubs.S	Sat Feb 20 19:48:08 2021 -0500
@@ -0,0 +1,100 @@
+/** \file
+ * Entry points into the firmware image.
+ *
+ * These are the functions that we can call from our tasks
+ * in the Canon 1.0.2 firmware for the EOS M50.
+ *
+ */
+/*
+ * Copyright (C) 2019 Magic Lantern Team
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the
+ * Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#include <stub.h>
+
+/* All functions are Thumb. */
+
+
+/** Startup **/
+NSTUB( ROMBASEADDR, firmware_entry )
+THUMB_FN(0xE00400FC,  cstart)                               /* calls bzero32 and create_init_task(..., init_task, ...) */
+THUMB_FN(0xE0578D64,  bzero32)                              /* zeros out a data structure */
+THUMB_FN(0xE0143CFC,  create_init_task)                     /* low-level DryOS initialization */
+THUMB_FN(0xE05777D0,  dcache_clean)                         /* loop with MCR p15 c7,c10,1; DSB */
+THUMB_FN(0xE05778A4 ,  icache_invalidate)                    /* loop with MCR p15 c7,c5,1; c7,c1,6; c7,c1,0; ISB */
+THUMB_FN(0xE0040224,  init_task)                            /* USER_MEM size checking, dmSetup, termDriverInit, stdlibSetup etc */
+
+/** Tasks **/
+DATA_PTR(    0x1010,  current_interrupt)                    /* from interrupt handler (VBAR + 0x18); where the interrupt ID is stored */
+DATA_PTR(    0x1028,  current_task)                         /* from task_create; pointer to the current task structure */
+THUMB_FN(0xE05598FA,  msleep)                               /* argument is always multiple of 10 */
+THUMB_FN(0xE0545EE2,  task_create)                          /* used to start TaskMain, GuiMainTask etc */
+
+/** File I/O **/
+THUMB_FN(0xE05465E6, _FIO_CreateFile)
+THUMB_FN(0xE0546534, _FIO_OpenFile)
+THUMB_FN(0xE0546D56,  FIO_CloseFile)
+THUMB_FN(0xE05469B6, _FIO_ReadFile)
+THUMB_FN(0xE0546B42, _FIO_WriteFile)
+THUMB_FN(0xE0546A82,  FIO_SeekSkipFile)                     // guess: Search?!
+THUMB_FN(0xE0546EF2, _FIO_GetFileSize)                      // AcqSize
+THUMB_FN(0xE054691C, _FIO_RemoveFile)
+THUMB_FN(0xE0547926, _FIO_RenameFile)
+THUMB_FN(0xE0547DB0, _FIO_CreateDirectory)
+THUMB_FN(0xE0548212, _FIO_FindFirstEx)                      // FirstEnt
+THUMB_FN(0xE0548318,  FIO_FindNextEx)                       // NextEnt
+THUMB_FN(0xE05483DA,  FIO_FindClose)                        // CloseEnt
+THUMB_FN(0xE0547F9A,  FIO_Flush)                            // to be called after FIO_CloseFile?
+
+/** Bitmap **/
+DATA_PTR(    0xFC20,  bmp_vram_info)                        /* first VRAM buffer, used right after DISP_SetUpdateOSDVram */
+
+/** Debug messages **/
+THUMB_FN(0xE0577FD0,  DryosDebugMsg)                        /* lots of debug messages; format string is third argument */
+
+/** Dumper **/
+THUMB_FN(0xE12FA534,  dump_file)                            /* tries to save a file to either "A:/%s" or "B:/%s"; calls FIO_RemoveFile/CreateFile/WriteFile/CloseFile/Flush */
+
+/** Eventprocs (call by name) **/
+THUMB_FN(0xE05722C6 ,  call)                                 /* many functions called by name (lv_start, lv_stop etc) */
+
+/** GUI timers **/
+THUMB_FN(0xE0732BDE,  SetHPTimerNextTick)                   /* same "worker" function as SetHPTimerAfterNow */
+THUMB_FN(0xE0732B7E ,  SetHPTimerAfterNow)                   /* from error message */
+THUMB_FN(0xE054CF14,  SetTimerAfter)                        /* from error message */
+THUMB_FN(0xE054CFCA,  CancelTimer)                          /* CancelRefreshTimer, CancelPlayTimer */
+
+/** Memory allocation **/
+THUMB_FN(0xE055B094, _AllocateMemory)
+THUMB_FN(0xE055B24C, _FreeMemory)
+THUMB_FN(0xE055AF1E,  GetMemoryInformation)
+THUMB_FN(0xE055AEF2,  GetSizeOfMaxRegion)
+THUMB_FN(0xE055AAF4, _alloc_dma_memory)
+THUMB_FN(0xE055AB28, _free_dma_memory)
+THUMB_FN(0xE03C242E, _malloc)
+THUMB_FN(0xE03C2466, _free)
+
+/** Memory info **/
+THUMB_FN(0xE00F1C18,  malloc_info)                          /* Malloc Information */
+THUMB_FN(0xE009DEB8,  memmap_info)                          /* Exception vector, DRYOS system memory etc */
+THUMB_FN(0xE0146FD6,  smemShowFix)                          /* Common Lower, Common Upper etc */
+THUMB_FN(0xE00F1CB0,  sysmem_info)                          /* System Memory Information */
+
+/** Misc **/
+THUMB_FN(0xE055A8B4,  uart_printf)
+THUMB_FN(0xE0096060,  vsnprintf)                            /* called by LogFile_printf(..., "*Data Lost*\n", ...); the one called by DebugMsg only knows %s */
\ No newline at end of file





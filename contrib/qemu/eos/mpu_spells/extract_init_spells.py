# Parse mpu_send/mpu_recv logs (from dm-spy-experiments branch)
# and generate MPU init spells code for QEMU.
#
# Very rough proof of concept, far from complete. Tested on 60D.

from __future__ import print_function
import os, sys, re
from outils import *
from known_spells import known_spells

# our MPU messages from logs are printed in lower case
for a in known_spells.keys():
    assert a == a.lower()

# without arguments, export known spells as C header
if len(sys.argv) == 1:
    print("Exporting known spells...", file=sys.stderr)
    print("""
/* autogenerated with extract_init_spells.py */

struct known_spell {
    uint8_t class;
    uint8_t id;
    uint32_t property;
    const char * description;
};

const struct known_spell known_spells[] = {""")
    for spell, data in sorted(known_spells.iteritems()):
        prop = data[0]
        desc = data[1]
        spell = ", ".join(["0x%s" % x for x in spell.split(" ")])
        print('    { %s, 0x%08X, "%s" },' % (spell, prop, desc))
    print("};")
    print("Done.", file=sys.stderr)
    raise SystemExit


processed_spells = {}

first_mpu_send_only = False

def replace_spell_arg(spell, pos, newarg):
    bytes = spell.split(" ")
    bytes[pos] = newarg
    return " ".join(bytes)

def format_spell(spell):
    bytes = spell.split(" ")
    bytes = [("0x" + b if len(b) == 2 else b) for b in bytes]
    return "{ " + ", ".join(bytes) + " }"

log_fullpath = sys.argv[1]
f = open(log_fullpath, "r")
lines = f.readlines()

# logs start with camera model, e.g. 60D-startup.log
[log_path, log_filename] = os.path.split(log_fullpath)
model = log_filename[:log_filename.index("-")]

print("static struct mpu_init_spell mpu_init_spells_%s[] = {" % model)
first_block = True
num = 0
num2 = 0

first_send = True
waitid_prop = None
comment_block = False
comment_all_blocks = False
commented_replies = False

switch_names = get_switch_names(model)
bind_switches = {}
last_bind_switch = None

for l in lines:
    # match bindReceiveSwitch with GUI_Control, both from MainCtrl task
    # note: GUI_Control messages can be sent from other tasks
    m = re.match(".* MainCtrl:.*bindReceiveSwitch *\(([^()]*)\)", l)
    if not m:
        # VxWorks (450D)
        m = re.match(".* tMainCtrl:.*\[BIND\] Switch *\(([^()]*)\)", l)
    if m:
        args = m.groups()[0].split(",")
        args = tuple([int(a) for a in args])
        # old models have some extra bindReceiveSwitch lines with a single argument; ignore them
        if len(args) == 2:
            last_bind_switch = args
        continue
    m = re.match(".* MainCtrl:.*GUI_Control:([0-9]+) +0x([0-9])+", l)
    if not m:
        m = re.match(".* tMainCtrl:.*\[BIND\] bindReceiveSwitch \(([0-9]+)\)", l)
    if m:
        if last_bind_switch is not None:
            arg1 = int(m.groups()[0])
            arg2 = int(m.groups()[1],16) if len(m.groups()) == 2 else 0
            if last_bind_switch in bind_switches:
                assert(bind_switches[last_bind_switch] == (arg1,arg2))
            else:
                bind_switches[last_bind_switch] = arg1,arg2
            last_bind_switch = None
        else:
            print("GUI_Control without bindReceiveSwitch", file=sys.stderr)
            print(l, file=sys.stderr)

prev_hwcount = 0
overflows = 0
timestamp = 0
last_mpu_timestamp = 0

for l in lines:
    if len(l) > 5 and l[5] == ">":
        hwcount = int(l[:5], 16)
        if hwcount < prev_hwcount:
            overflows += 1
        prev_hwcount = hwcount
        timestamp = overflows * 0x100000 + hwcount

    m = re.match(".* mpu_send\(([^()]*)\)", l)
    if m:
        last_mpu_timestamp = timestamp
        spell = m.groups()[0].strip()
        parm_spell = spell

        if first_send or not first_mpu_send_only:
            first_send = False
            
            # spell counters
            num += 1
            num2 = 0
            
            if first_block:
                first_block = False
            elif comment_block:
                print("     // { 0 } } },");
                num -= 1
                if not comment_all_blocks:
                    comment_block = False
            else:
                print("        { 0 } } },")

            description = ""

            if spell[6:11] in known_spells:
                metadata = known_spells[spell[6:11]]
                description = metadata[1]

                # parameterized spell?
                if len(metadata) > 2:
                    for pos,newarg in metadata[2:]:
                        parm_spell = replace_spell_arg(parm_spell, pos, newarg)

            if spell.startswith("06 04 02 00 "):
                description = "Init"

            if spell.startswith("08 06 00 00 "):
                description = "Complete WaitID ="
                if waitid_prop:
                    description += " " + waitid_prop
                if spell[12:17] == "02 00":
                    description += " " + "Init"
                elif spell[12:17] in known_spells:
                    description += " " + known_spells[spell[12:17]][1]

            # comment out NotifyGuiEvent / PROP_GUI_STATE and its associated Complete WaitID
            if description == "NotifyGUIEvent" or description == "Complete WaitID = 0x80020000 NotifyGUIEvent":
                comment_block = True

            # comment out PROP_ICU_UILOCK - we have it in UILock.h
            if description == "PROP_ICU_UILOCK":
                comment_block = True

            # comment out PROP_BATTERY_CHECK
            if description == "PROP_BATTERY_CHECK":
                comment_block = True

            # include PROP_BATTERY_REPORT only once
            if description == "PROP_BATTERY_REPORT":
                if spell in processed_spells:
                    comment_block = True

            if description == "PROP_SHOOTING_TYPE":
                assert spell[12:17] == "03 00"  # fixme: not sure what to do with these
                comment_block = True
                comment_all_blocks = True

            if comment_block:
                # commented blocks are not numbered, to match the numbers used at runtime
                if description:
                    print(" // { %-58s" % (format_spell(parm_spell) + ", .description = \"" + description + "\", .out_spells = { "))
                else:
                    print(" // { %-58s" % (format_spell(parm_spell) + ", {"))
            else:
                if description:
                    print("    { %-58s/* spell #%d */" % (format_spell(parm_spell) + ", .description = \"" + description + "\", .out_spells = { ", num))
                else:
                    print("    { %-58s/* spell #%d */" % (format_spell(parm_spell) + ", {", num))

            processed_spells[spell] = True

            continue

    m = re.match(".* mpu_recv\(([^()]*)\)", l)
    if m:
        reply = m.groups()[0].strip()
        num2 += 1

        cmt = "  "
        warning = ""
        description = ""

        dt = timestamp - last_mpu_timestamp
        if dt > 100000:
            warning = "delayed by %d ms, likely external input" % (dt/1000)
            cmt = "//"
        last_mpu_timestamp = timestamp

        # comment out entire block?
        if comment_block:
            cmt = "//"

        # comment out button codes
        if reply.startswith("06 05 06 "):
            args = reply.split(" ")[3:5]
            args = tuple([int(a,16) for a in args])
            if args in bind_switches:
                btn_code = bind_switches[args][0]
                if btn_code in switch_names:
                    cmt = "//"
                    warning = ""

        if reply.startswith("06 05 06 "):
            args = reply.split(" ")[3:5]
            args = tuple([int(a,16) for a in args])
            if args in bind_switches:
                btn_code = bind_switches[args][0]
                if btn_code in switch_names:
                    description += ", %s" % switch_names[btn_code]
                description += ", GUI_Control:%d" % btn_code
            description += ", bindReceiveSwitch(%d, %d)" % (args[0], args[1])
            description = description[2:]

        if reply[6:11] in known_spells:
            metadata = known_spells[reply[6:11]]

            # generic description from name and arguments
            if not description:
                description = metadata[1]
                args = []
                for pos,newarg in metadata[2:]:
                    args.append(reply.split(" ")[pos])
                if args:
                    description += "(%s)" % ", ".join(args)

            # replace parameters with ARG0, ARG1 etc where the choice is obvious
            for pos,newarg in metadata[2:]:
                if reply[6:11] == spell[6:11] and \
                   len(reply.split(" ")) == len(spell.split(" ")):          # same length?
                      assert newarg == parm_spell.split(" ")[pos]           # same arg in this position?
                      assert reply.split(" ")[pos] == spell.split(" ")[pos] # same numeric argument?
                      reply = replace_spell_arg(reply, pos, newarg)

        # disable sensor cleaning
        if description == "PROP_ACTIVE_SWEEP_STATUS":
            reply = replace_spell_arg(reply, 4, "00")
            warning = ("disabled, " + warning).strip(" ,")

        # comment out mode switches
        if reply[6:11] in [ "02 00", "02 0e" ] and num > 1:
            cmt = "//"
            warning = "mode switch?"

        # comment out photo capture and anything past that, if any
        if description == "EVENTID_METERING_START_SW1ON":
            cmt = "//"
            comment_block = True
            comment_all_blocks = True
            commented_replies = True

        # show lens name as comment
        if description == "PROP_LENS_NAME":
            description += ": "
            for ch in reply.split(" ")[4:]:
                ch = int(ch, 16)
                if ch:
                    description += chr(ch)

        print("     %s %-56s/* reply #%d.%d" % (cmt, format_spell(reply) + ",", num, num2), end="")

        if description:
            print(", %s" % description, end="")

        if warning:
            print(", %s" % warning, end="")

        print(" */")
        continue
    
    # after a Complete WaitID line, the ICU sends to the MPU a message saying it's ready
    # so the MPU can then send data for the next property that requires a "Complete WaitID"
    # (if those are not synced, you will get ERROR TWICE ACK REQUEST)
    # example:
    #    PropMgr:ff31ec3c:01:03: Complete WaitID = 0x80020000, 0xFF178514(0)
    #    PropMgr:00c5c318:00:00: *** mpu_send(08 06 00 00 04 00 00), from 616c
    # the countdown at the end of the line must be 0

    m = re.match(".*Complete WaitID = ([0-9A-Fx]+), ([0-9A-Fx]+)\(0\)", l)
    if m:
        waitid_prop = m.groups()[0]

print("     // { 0 } } }," if comment_block and not commented_replies else "        { 0 } } },")
print("")
print('    #include "NotifyGUIEvent.h"')
print('    #include "UILock.h"')
print('    #include "CardFormat.h"')
print('    #include "MpuProperties.h"')
print('    #include "GPS.h"')
print('    #include "LiveView.h"')
print('    #include "Shutdown.h"')
print("};")
